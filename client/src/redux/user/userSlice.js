import { createSlice } from '@reduxjs/toolkit'

const initialState = {
    currentUser: null,
    error: null,
    loading: false,
};

const userSlice = createSlice(
    {
        name: 'user',
        initialState,
        reducers: {
            // sign in reducer
            signInStart(state) {
                // state.currentUser = null;
                state.error = null;
                state.loading = true;
            },
            // it accept 'action' object. 'action.type' is user/signInSuccess, 'action.payload' is the user object i passed in
            //  action is generated by the action creator, which is signInSuccess(user) is generated by the userSlice automatically
            signInSuccess(state, action) {
                state.currentUser = action.payload;
                state.loading = false;
                state.error = null;
            },
            // it accept the 'action' object. 'action.type' is user/signInFailure, 'action.payload' is the error object i passed in
            signInFailure(state, action) {
                // state.currentUser = null;
                state.loading = false;
                state.error = action.payload;
            },

            // update user reducer
            updateUserStart(state) {
                state.error = null;
                state.loading = true;
            },
            // it accept the 'action' object. 'action.type' is user/signOutSuccess, 'action.payload' is the user object i passed in
            updateUserSuccess(state, action) {
                state.currentUser = action.payload;
                state.loading = false;
                state.error = null;
            },
            // it accept the 'action' object. 'action.type' is user/signOutFailure, 'action.payload' is the error object i passed in
            updateUserFailure(state, action) {
                state.loading = false;
                state.error = action.payload;
            },

            // delete user reducer
            deleteUserStart(state) {
                state.error = null;
                state.loading = true;
            },
            deleteUserSuccess(state) {
                state.currentUser = null;
                state.loading = false;
                state.error = null;
            },
            deleteUserFailure(state, action) {
                state.loading = false;
                state.error = action.payload;
            },

            // sign out reducer
            signOutStart(state) {
                state.error = null;
                state.loading = true;
            },
            signOutSuccess(state) {
                state.currentUser = null;
                state.loading = false;
                state.error = null;
            },
            signOutFailure(state, action) {
                state.loading = false;
                state.error = action.payload;
            },
        }
    }
)

export const {
    signInStart,
    signInSuccess,
    signInFailure,

    updateUserStart,
    updateUserSuccess,
    updateUserFailure,

    deleteUserStart,
    deleteUserSuccess,
    deleteUserFailure,

    signOutStart,
    signOutSuccess,
    signOutFailure,

} = userSlice.actions;

export default userSlice.reducer;